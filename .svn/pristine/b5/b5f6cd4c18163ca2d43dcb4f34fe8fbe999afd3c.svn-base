package com.unioncast.ssp.front.controller.ssp.media;

import java.util.ArrayList;
import java.util.LinkedHashMap;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.unioncast.common.restClient.RestResponse;
import com.unioncast.common.restClient.RestResponseFactory;
import com.unioncast.common.ssp.model.SspCreative;
import com.unioncast.common.ssp.model.SspFinanceInfo;
import com.unioncast.common.ssp.model.SspWithdrawRequestInfo;
import com.unioncast.common.user.model.User;
import com.unioncast.ssp.front.controller.common.BaseController;
import com.unioncast.ssp.front.service.ssp.SspDevoloperService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;

@Api("开发者")
@Controller
@RequestMapping("/rest/sspDeveloper")
public class SspDeveloperController extends BaseController {
	
	private static final Logger LOG = LogManager.getLogger(SspDeveloperController.class);
	
	@Resource
	SspDevoloperService sspDevoloperService;
	

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public String main() {
		return "ssp/media/developer/list";
	}
	
	@RequestMapping(value = "/details", method = RequestMethod.GET)
	public String enterDetails(Model model, Long id) {
		RestResponse response = sspDevoloperService.findByDeveloperId(id);
		SspFinanceInfo financeInfo = null;
		if(response.getResult() != null) {
			ArrayList<Object> list = (ArrayList<Object>) response.getResult();
			if(list.size() > 0) {
				LinkedHashMap<String, SspCreative> map = (LinkedHashMap<String, SspCreative>) list.get(0);
				String json = JSONObject.toJSONString(map);
				financeInfo = JSONObject.parseObject(json, SspFinanceInfo.class);
				model.addAttribute("financeInfo", financeInfo);
			} else {
				model.addAttribute("error", "未查到该账户信息");
			}
		} else {
			model.addAttribute("error", "未查到该账户信息");
		}
		return "ssp/media/developer/details";
	}
	
	@ApiOperation(value = "条件分页查询", httpMethod = "POST", response = RestResponse.class)
	@ApiImplicitParam(name = "pageCriteria", value = "分页查询条件", required = true, dataType = "PageCriteria", paramType = "body")
	@ResponseBody
	@RequestMapping(value = "/page", method = RequestMethod.POST)
	public RestResponse page(HttpServletRequest request, Long accountId,
			@RequestParam(value = "userName", required = false) String userName,
			@RequestParam(value = "startTime", required = false) String startTimeStr,
			@RequestParam(value = "endTime", required = false) String endTimeStr,
			@RequestParam(value = "pageSize", required = false, defaultValue = "10") Integer pageSize,
			@RequestParam(value = "currentPageNo", required = false, defaultValue = "1") Integer currentPageNo) {

		RestResponse restResponse = new RestResponse();
		restResponse.setStatus(RestResponse.OK);
		try {
//			SecurityUser securityUser = (SecurityUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
//			Long accountID = securityUser.getId();
			RestResponse response = sspDevoloperService.page(userName, 2, startTimeStr, endTimeStr, currentPageNo, pageSize);
			
			// Integer orders = sspAdvertiserService.countOrderByAdvertiser(1L);
			return response;
		} catch (Exception e) {
			LOG.error("查询开发者分页出错");
			return RestResponseFactory.exception(e);
		}
	}
	
	
	
}
